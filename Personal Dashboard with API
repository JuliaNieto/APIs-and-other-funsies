USEFUL WEBSITE FOR BACKGROUND--> https://css-tricks.com/perfect-full-page-background-image/#awesome-easy-progressive-css3-way

fetch("https://apis.scrimba.com/unsplash/photos/random?orientation=landscape&query=nature")
    .then(res => res.json())
    .then(data => {
      document.body.style.backgroundImage = `url(${data.url.full})`
      document.getElementById('author-name').innerHTML = `By: ${data.user.name}`
    })
     .catch(err => {
        // Use a default background image/author
        document.body.style.backgroundImage = `url(https://images.unsplash.com/photo-1560008511-11c63416e52d?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwyMTEwMjl8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MjI4NDIxMTc&ixlib=rb-1.2.1&q=80&w=1080
)`
		document.getElementById("author").textContent = `By: Dodi Achmad`
    })
    
    
  fetch("https://api.coingecko.com/api/v3/coins/dogecoin")
    .then(res => {
        if (!res.ok) {
            throw Error("Something went wrong")
        }
        return res.json()
    })
    .then(data => {
   
         document.getElementById("crypto-top").innerHTML = `
            <img src="${data.image.small}" />
            <span>data.name</span>
        `
         document.getElementById("crypto").innerHTML +=` 
            <p> Current: $${data.market_data.current_price.usd}</p>
            <p>High: $${data.market_data.high_24h.usd}</p>
            <p>Low: $${data.market_data.low_24h.usd}</p> // the dollar sign is to signify that the value is in dollar units
        `
    })
    .catch(err => console.error(err))
// adding the current time on the dashboard, and updating it every second
function dateSeconds(){
const date = new Date()
    document.getElementById("time").textContent = date.toLocaleTimeString("en-us", {timeStyle: "medium"})
}

 setInterval("dateSeconds()", 1000)

// we first select the geolocation we are currently at, one we have the position we fetch the api for such position with the latitude and longitude and then we select the units
// after we fetch the API we go and say that if the response is not okay we shall throw an error saying that the data is unavailable. 
// if is okay we just return the data as JSON and we console log it
navigator.geolocation.getCurrentPosition(position => {
    fetch(`https://apis.scrimba.com/openweathermap/data/2.5/weather?lat=${position.coords.latitude}&lon=${position.coords.longitude}&units=metricl`)
        .then(res => {
            if (!res.ok) {
                throw Error("Weather data not available")
            }
            return res.json()
        })
        .then(data => {
           const iconUrl = `http://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`
            document.getElementById("weather").innerHTML = `
            <div id="temperature">
                <img src=${iconUrl} />
                <p>${Math.round(data.main.temp)}ยบ</p>
            </div>
                <p>${data.name}</p>
            
            `
        })
	.catch(err => console.error(err))
});








    --------------------------html-----------------------------
<html>
    <head>
        <meta charset="UTF-8" />
        <link rel="stylesheet" href="index.css">
        <title>Personal Dashboard</title>
    </head>
    <body>
        <main>    
            <div class="top">
                <div id="crypto">
                    <div id="crypto-top"></div>
                </div>
                <div id="weather"></div>
            </div>
            
            <h1 id="time" class="time"></h1>
            <p id="author"></p>
        </main>
        <script src="index.js"></script>
    </body>
</html>
    
    -------------------css--------------------------
* {
    box-sizing: border-box;
}    

body {
    margin: 0;
    background: no-repeat center center fixed; 
    -webkit-background-size: cover;
    -moz-background-size: cover;
    -o-background-size: cover;
    background-size: cover;
    color: white;
    font-family: Arial, Helvetica, sans-serif;
    text-shadow: 0px 0px 20px #242424;
}

main {
    padding: 15px;
    height: 100vh;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
}

div.top {
    display: flex;
    justify-content: space-between;
}

h1.time {
    text-align: center;
}

div#crypto {
    font-size: 1.3rem;
}

div#crypto > p {
    margin: 0;
}

div#crypto-top {
    display: flex;
    align-items: center;
    margin-bottom: 5px;
}

div#crypto-top > span {
    margin-left: 10px;
}

div#weather {
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    justify-content: flex-end;
    align-self: flex-start;
}

div#weather > img {
    width: 70px;
}

p.weather-city {
    width: 100%;
    text-align: right;
    margin: 0;
    margin-top: -10px;
}

p.weather-temp {
    margin: 0;
    font-size: 1.7rem;
    margin-left: -10px;
}




-----------------manifest.json-------------------------
{
    "manifest_version": 3,
    "name": "Personal Dashboard",
    "version": "1.0.0",
    "description": "Just for practicing async JS",
    "action": {
        "default_icon": "icon.png"
    },
    "chrome_url_overrides": {
        "newtab": "index.html"
    }
}














