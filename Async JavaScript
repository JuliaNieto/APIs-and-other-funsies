document.getElementById('newDeck').addEventListener('click',function(){
    fetch('https://apis.scrimba.com/deckofcards/api/deck/new/shuffle/')
        .then(resp=>resp.json())
        .then(data=>console.log(data))
})



/**
 * Challenge: Define our anonymous callback function as a separate function, then
 * pass it as the 2nd parameter to our `addEventListener`
 */



let newDeckCards = function() {
     fetch("https://apis.scrimba.com/deckofcards/api/deck/new/shuffle/")
        .then(res => res.json())
        .then(data => console.log(data))
}
document.getElementById("new-deck").addEventListener("click", newDeckCards) //No parenthesis here




----------------USING SETTIMEOUT-------------------------------
function greet(){
    console.log('i finally ran')
}
setTimeout(greet, 2000)
-----------------------ARRAY.FILTER----------------------------
const peopleWithPets = people.filter(person => person.hasPet)

CHECK OUT THIS  --> https://www.javascripttutorial.net/javascript-array-filter
function areTheyAdults(){
    let adults =[]
    for(i=0; i< people.length; i++){
        if (people[i].age >= 18){
            adults.push(people[i])
        }
    }
    console.log(adults)
}

areTheyAdults()


function filterArray(array, callback){
    const resultingArray =[]
    for (let item of array){
        const shouldBeIncluded = callback(item)
        if (shouldBeIncluded){
            resultingArray.push(item)
        }
    }
    return resultingArray
}


// here the callback above is like an 'empty spot' for a function.
// Hence we have to specify that we want a function there that returns
// the persons of the array that have a pet
const peopleWithPets = filterArray(people, function(person) {
    return person.hasPet === true
})

const voting= voters.filter(voter => voter.voted).map(voter=>voter.email)

----------------------
<html>
    <head>
        <link rel="preconnect" href="https://fonts.gstatic.com">
        <link href="https://fonts.googleapis.com/css2?family=Exo+2:wght@300&display=swap" rel="stylesheet">
        <link rel="stylesheet" href="index.css">
    </head>
    <body>
        <div class="top">
        <button id="new-deck">New Deck</button>
         <p id="remaining"></p>
        </div>
        <h2 id="header">Game of War</h2>
        <h3 id="computer-score">Computer Score: 0</h3>
        <div id="cards"></div>
        <h3 id="my-score">My Score: 0</h3>
        <button id="draw-cards" class="draw">Draw</button>
        <script src="index.js"></script>
    </body>
</html>

---------------------
html, body {
    margin: 0;
    padding: 0;
    background-image: url("img/table.png");
    font-family: "Exo 2", sans-serif;
    height: 100vh;
}

body {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    color:white;
}

button {
    background-color: #FFF100;
    cursor: pointer;
    border: none;
}

button#new-deck {
    align-self: flex-start;
    padding: 5px;
}

button.draw {
    font-size: 1.2em;
    padding: 5px;
}

div.top{
    display:flex;
    align-self:flex-start;
    
}

div.top >p{
    margin:0;
    margin-left:10px;
}

button:disabled{
    cursor:not-allowed;
}


---------------------

let deckId
let computerScore = 0
let myScore = 0
const cardsContainer = document.getElementById("cards")
let newDeck = document.getElementById("new-deck")
let drawCards = document.getElementById("draw-cards")
const header = document.getElementById("header")
const remainingText = document.getElementById("remaining")
const computerScoreEl = document.getElementById("computer-score")
const myScoreEl = document.getElementById("my-score")

function handleClick() {
    fetch("https://apis.scrimba.com/deckofcards/api/deck/new/shuffle/")
        .then(res => res.json())
        .then(data => {
            deckId = data.deck_id
            remainingText.textContent = `Remaining Cards: ${data.remaining}` 
        })
}

newDeck.addEventListener("click", handleClick)

drawCards.addEventListener("click", () => {
    fetch(`https://apis.scrimba.com/deckofcards/api/deck/${deckId}/draw/?count=2`)
        .then(res => res.json())
        .then(data => {
            cardsContainer.children[0].innerHTML = `
                <img src=${data.cards[0].image} class="card" />
            `
            cardsContainer.children[1].innerHTML = `
                <img src=${data.cards[1].image} class="card" />
            `
            determineCardWinner(data.cards[0], data.cards[1])
            header.textContent = winnerText
            remainingText.textContent = `Remaining Cards ${data.remaining}`
           if (data.remaining === 0) {
                drawCardBtn.disabled = true
                if(computerScore > myScore){
                    header.textContent = `Computer Wins!`
                }
                else if(myScore > computerScore){
                     header.textContent = `You Win!`
                }
                else{
                    header.textContent = "It's a tie game!"
                }
            }
            
       
       })
        
})

function highCard(card1, card2){
    console.log(card1.value)
    console.log(card2.value)
    if (card1.value < card2.value){
        console.log("card 2 is bigger")
    }
    else if (card1.value == card2.value){
        console.log("they the same")
    }
    else{
        console.log("card 1 is bigger")
    }
}


function determineCardWinner(card1, card2) {
    const valueOptions = ["2", "3", "4", "5", "6", "7", "8", "9", 
    "10", "JACK", "QUEEN", "KING", "ACE"]
    const card1ValueIndex = valueOptions.indexOf(card1.value)
    const card2ValueIndex = valueOptions.indexOf(card2.value)
    
    if (card1ValueIndex > card2ValueIndex) {
        computerScore ++
        computerScoreEl.textContent = `Computer score: ${computerScore}`
        return "Computer wins!"
        
    } else if (card1ValueIndex < card2ValueIndex) {
        myScore ++
        MyScoreEl.textContent = `My score: ${myScore}`
        return "You wins!"
    } else {
        return "War!"
    }
}

